name: Monitor Live Theme Changes
on:
  schedule:
    # Check every 15 minutes during business hours
    - cron: '*/15 9-17 * * 1-5'
    # Check every 5 minutes during promotion periods (weekends)
    - cron: '*/5 * * * 0,6'
  
  workflow_dispatch:

jobs:
  monitor-theme:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Shopify CLI
      run: npm install -g @shopify/cli@latest
    
    - name: Check current live theme
      id: check-theme
      run: |
        # Get current live theme
        CURRENT_THEME=$(shopify theme list --json | jq -r '.[] | select(.role=="main") | .name')
        CURRENT_ID=$(shopify theme list --json | jq -r '.[] | select(.role=="main") | .id')
        
        echo "current_theme=$CURRENT_THEME" >> $GITHUB_OUTPUT
        echo "current_id=$CURRENT_ID" >> $GITHUB_OUTPUT
        echo "Current live theme: $CURRENT_THEME (ID: $CURRENT_ID)"
        
        # Check if we have a record of the expected theme
        if [[ -f .github/expected-live-theme.txt ]]; then
          EXPECTED_THEME=$(cat .github/expected-live-theme.txt)
          echo "expected_theme=$EXPECTED_THEME" >> $GITHUB_OUTPUT
          
          if [[ "$CURRENT_THEME" != "$EXPECTED_THEME" ]]; then
            echo "theme_changed=true" >> $GITHUB_OUTPUT
            echo "Theme changed from $EXPECTED_THEME to $CURRENT_THEME"
          else
            echo "theme_changed=false" >> $GITHUB_OUTPUT
          fi
        else
          # First run - record current theme as expected
          echo "$CURRENT_THEME" > .github/expected-live-theme.txt
          echo "theme_changed=false" >> $GITHUB_OUTPUT
          echo "Recording initial theme: $CURRENT_THEME"
        fi
      env:
        SHOPIFY_FLAG_STORE: ${{ secrets.SHOPIFY_STORE_URL }}
        SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.SHOPIFY_CLI_THEME_TOKEN }}
    
    - name: Update expected theme record
      if: steps.check-theme.outputs.theme_changed == 'true'
      run: |
        echo "${{ steps.check-theme.outputs.current_theme }}" > .github/expected-live-theme.txt
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions Monitor"
        git add .github/expected-live-theme.txt
        git commit -m "Update expected live theme to: ${{ steps.check-theme.outputs.current_theme }}"
        git push
    
    - name: Alert on theme change
      if: steps.check-theme.outputs.theme_changed == 'true'
      run: |
        echo "::warning::Live theme changed from ${{ steps.check-theme.outputs.expected_theme }} to ${{ steps.check-theme.outputs.current_theme }}"
        
        # Create GitHub issue for tracking
        gh issue create \
          --title "ðŸš¨ Live theme changed to: ${{ steps.check-theme.outputs.current_theme }}" \
          --body "**Previous theme:** ${{ steps.check-theme.outputs.expected_theme }}
        **New theme:** ${{ steps.check-theme.outputs.current_theme }}
        **Theme ID:** ${{ steps.check-theme.outputs.current_id }}
        **Detection time:** $(date)
        
        ## Action Items:
        - [ ] Verify theme change was intentional
        - [ ] Set up tracking for new theme if promotional
        - [ ] Update deployment workflows if needed
        - [ ] Plan sync strategy for promotional changes
        
        **Auto-generated by theme monitoring workflow**" \
          --label "theme-change,urgent" \
          --assignee your-lead-developer
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Slack notification
      if: steps.check-theme.outputs.theme_changed == 'true'
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "ðŸš¨ *THEME CHANGE ALERT*",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Live theme changed!*\n*From:* ${{ steps.check-theme.outputs.expected_theme }}\n*To:* ${{ steps.check-theme.outputs.current_theme }}\n*Time:* $(date)"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Issue"
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/issues"
                  }
                ]
              }
            ]
          }' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL != ''